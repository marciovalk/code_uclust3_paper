GuardaBnPad<-vector()
naux<-n%/%3
posicaocentral<-c(rep(1,naux),rep(2,naux),rep(3,(n-2*naux)))
Bncentral<-vector()
for(fi in 1:1000){
posicaofisher<-sample(posicaocentral)
Bncentral[fi]<--bn3(posicaofisher,md)
}
BootB<-var(Bncentral)
posicaocentralgrupo1<-c(1,rep(2,naux),rep(3,(n-naux-1)))
Bncentralgrupo1<-vector()
for(fi in 1:1000){
posicaofisher<-sample(posicaocentralgrupo1)
Bncentralgrupo1[fi]<--bn3(posicaofisher,md)
}
BootB1<-var(Bncentralgrupo1)
if(cent==-1){
cent<-sample(n,3)
}
for(i in 1:n){
if(min(md[i,cent[1]],md[i,cent[2]],md[i,cent[3]])==md[i,cent[1]]){
ass[i]<-1
} else{
if(md[i,cent[2]]<md[i,cent[3]]){
ass[i]<-2
}else{
ass[i]<-3
}
}
}
it<-1
Ass[,it]<-ass
while(it<itmax && !prod(ass==ass_ant)){
ass_ant<-ass
ord<-sample(n,n)
for(i in ord){
ass[i]<-1
bnpad1<-(-bn3(ass,md)/sqrt(funcaovar(ass,BootB,BootB1)$varbn))
ass[i]<-2
bnpad2<--bn3(ass,md)/sqrt(funcaovar(ass,BootB,BootB1)$varbn)
ass[i]<-3
bnpad3<--bn3(ass,md)/sqrt(funcaovar(ass,BootB,BootB1)$varbn)
if(min(bnpad1,bnpad2,bnpad3)==bnpad1){
ass[i]<-1
}else{
if(bnpad2<bnpad3){
ass[i]<-2
}
}
}
GuardaBnPad[it]<--bn3(ass,md)/sqrt(funcaovar(ass,BootB,BootB1)$varbn)
it<-it+1
Ass[,it]<-ass
}
varBn<-funcaovar(ass,BootB,BootB1)$varbn
ans<-list(which(ass==1),which(ass==2),which(ass==3),-GuardaBnPad,it-1,varBn,BootB,BootB1)
names(ans)=c("grupo 1","grupo 2","grupo 3","Bn Padronizado", "numIt","VarBn","BootB","BootB1")
return(ans)
}
repeteBnpadmax<-function(mdist,repBn=15){
Bn<-vector()
iter<-vector()
varBn<-vector()
BootB<-vector()
BootB1<-vector()
grupos<-matrix(0,ncol=dim(mdist)[1],nrow<-repBn)
for(k in 1:repBn){
resultado<-calcularbnotimizadapad(mdist)
Bn[k]<-resultado[[4]][resultado[[5]]]
grupos[k,resultado[[1]]]<-1;grupos[k,resultado[[2]]]<-2;grupos[k,resultado[[3]]]<-3
iter[k]<-resultado[[5]]
varBn[k]<-resultado[[6]]
BootB[k]<-resultado[[7]]
BootB1[k]<-resultado[[8]]
}
Bn.max<-max(Bn)
ind.max<-which(Bn==Bn.max)
if(is.vector(ind.max)){ind.max<-ind.max[1]}
grupos.max1<-which(grupos[ind.max,]==1);grupos.max2<-which(grupos[ind.max,]==2);grupos.max3<-which(grupos[ind.max,]==3)
iter.max<-iter[ind.max]
varBn.max<-varBn[iter.max]
BootB.max<-BootB[iter.max]
BootB1.max<-BootB1[iter.max]
resposta<-list(grupos.max1,grupos.max2,grupos.max3,Bn.max,iter.max,varBn.max,BootB.max,BootB1.max)
names(resposta)=c("grupo 1","grupo 2","grupo 3","Bn Padronizado", "numIt","varBn","BootB","BootB1")
return(resposta)
}
gama3<-function(n){
se3<-(243*(3^(n-6))+(1+n+(n^2))-(2+n)*(2^(n-1)))/2
delta3<-(2^(n-2)-n)*n
return(se3+delta3)
}
## U-statistic based homogeneity test for 3 groups
# Description
# Homogeneity test based on the statistic bn3. The test assesses whether there exists a data partition for which three group separation is statistically significant according to the utest3. The null hypothesis is overall sample homogeneity, and a sample is considered homogeneous if it cannot be divided into three statistically significant subgroups.
# Usage
# is_homo(md = NULL, data = NULL,rep=20,test_max=TRUE,alpha=0.05)
# Arguments
# md - Matrix of squared Euclidean distances between all data points.
# data - Data matrix. Each row represents an observation.
# rep	- Number of times to repeat optimization procedure. Important for problems with multiple optima.
is_homo3<-function(md = NULL, data = NULL,rep=20,test_max=TRUE,alpha=0.05){
if (is.null(md)) {
if (is.null(data)) {
stop("No data provided")
}
md <- as.matrix(dist(data)^2)
}
if (class(md) != "matrix") {
stop("md is not of class matrix")
}
n <- dim(md)[1]
if (n <= 4) {
stop("samples size n is too small for homogeneity test")
}
nt<-gama3(n)
resultado<-repeteBnpadmax(md,rep)
Bn<-resultado[[4]]
BootB<-resultado[[7]]
BootB1<-resultado[[8]]
if(test_max==TRUE){
if(nt<=2^(28)){
pvalor<-1-exp(nt*pnorm(Bn,log.p=TRUE))
}else{
bn=sqrt(2*log(nt))-(log(log(nt))+log(4*pi*log(2)^2))/(2*sqrt(2*log(nt)))
an=(log((4*log(2)^2)/log(4/3)^2))/(2*sqrt(2*log(nt)))
bgumbel=(1/an)*(Bn-bn)
pvalor<-1-exp(-exp(-bgumbel))
}
g1<-resultado[[1]];g2<-resultado[[2]];g3<-resultado[[3]]
varBn<-resultado[[6]]
BootB<-resultado[[7]]
BbootB1<-resultado[[8]]
ans<-list(Bn,g1,g2,g3,pvalor,BootB,BootB1,varBn)
names(ans)=list("Bn","grupo1","grupo2","grupo3","p.value","BootB","BootB1","varBn")
}else{
pvalor.Bonf<-pnorm(Bn,lower.tail=FALSE)
alpha.Bonf<-alpha/nt
ans=list(Bn,g1,g2,g3,pvalor.Bonf,alpha.Bonf,BootB,BootB1,varBn)
names(ans)=list("Bn","grupo1","grupo2","grupo3","pvalue.Bonferroni","alpha_Bonferroni","BootB","BootB1","varBn")
}
return(ans)
}
#set.seed(123)
#x = matrix(rnorm(18000),nrow=18)  #creating homogeneous Gaussian dataset
#res = is_homo3(data=x)
#res
#x[1:6,] = x[1:6,]+0.5 #Heterogeneous dataset (first 5 samples have different mean)
#x[7:12,] = x[7:12,]+1
#res = is_homo3(data=x)
#res
#md = as.matrix(dist(x)^2) #squared Euclidean distances for the same data
#res = is_homo3(md)
# Multidimensional sacling plot of distance matrix
#fit <- cmdscale(md, eig = TRUE, k = 2)
#x <- fit$points[, 1]
#y <- fit$points[, 2]
#plot(x,y, main=paste("Homogeneity test: p-value =",res$p.MaxTest))
# Description
# clustring data into three groups only when these partitions are statistically significant.
# uhclust(md = NULL, data = NULL, alpha = 0.05, rep = 15)
# md	- Matrix of squared Euclidean distances between all data points.
# data	- Data matrix. Each row represents an observation.
# alpha	- Significance level.
# rep	- Number of times to repeat optimization procedures. Important for problems with multiple optima.
uclust3<-function(md=NULL,data=NULL,alpha=0.05,rep=15){
if (is.null(md)) {
if (is.null(data)) {
stop("No data provided")
}
md <- as.matrix(dist(data)^2)
}
if (class(md) != "matrix") {
stop("md is not of class matrix")
}
n<-dim(md)[1]
is.h<-is_homo3(rep=rep,md) #  max std Bn
ResultadoTesteIsHomo<-is.h   #remove?
BootB<-is.h$BootB
BootB1<-is.h$BootB1
if(is.h$p.value< alpha){ # is_homo return homogeneous?
oBn<-repeteBnmax(md,rep) # rep to find max Bn
maxBn<-oBn[[4]]
posicaoBnmax<-vector()
posicaoBnmax[oBn[[1]]]<-1;posicaoBnmax[oBn[[2]]]<-2;posicaoBnmax[oBn[[3]]]<-3
# for size one group
n1<-length(oBn[[1]])
# Bonferroni test for max Bn
varbn<-funcaovar(posicaoBnmax,BootB,BootB1)$varbn
pvalor.Bonf<-pnorm(maxBn/sqrt(varbn),lower.tail = FALSE)
alpha.Bonf<-alpha/gama3(n)
if(pvalor.Bonf<alpha.Bonf){
Bn1.temp<-repeteBnmaxsize1(md)
maxBn1.temp<-Bn1.temp[[1]]
if(maxBn>maxBn1.temp){
clust1<-oBn[[1]];clust2<-oBn[[2]];clust3<-oBn[[3]]
p.valor<-pvalor.Bonf
}else{
clust1<-Bn1.temp[[2]];clust2<-Bn1.temp[[3]];clust3<-Bn1.temp[[4]]
# Bonferroni test for max  Bn with group size 1
posicaoBn1max.temp<-vector()
posicaoBn1max.temp[clust1]<-1;posicaoBn1max.temp[clust2]<-2;posicaoBn1max.temp[clust3]<-3
varbn1.temp<-funcaovar(posicaoBn1max.temp,BootB,BootB1)$varbn
pvalor.Bonf<-pnorm(maxBn1.temp/sqrt(varbn1.temp),lower.tail = FALSE)
p.valor<-pvalor.Bonf
}
}else{
n2<-length(oBn[[2]]);n3<-length(oBn[[3]])
minsize<-((n1==floor(n/3)&&n2==floor(n/3))||(n1==floor(n/3)&&n3==floor(n/3))||(n2==floor(n/3)&&n3==floor(n/3)))# os tamanhos com menor variancia para os quais nao queremos fazer otimizacao restrita
# Bn for group size 1
oBn1<-repeteBnmaxsize1(md) #
maxBn1<-oBn1[[1]]
# for centralized groups
if(minsize==TRUE){
clust1<-oBn1[[2]];clust2<-oBn1[[3]];clust3<-oBn1[[4]]
# Bonferroni test for max Bn with size one group
posicaoBn1max<-vector()
posicaoBn1max[clust1]<-1;posicaoBn1max[clust2]<-2;posicaoBn1max[clust3]<-3
varbn1<-funcaovar(posicaoBn1max,BootB,BootB1)$varbn
pvalor.Bonf.<-pnorm(maxBn1/sqrt(varbn1),lower.tail = FALSE)
alpha.Bonf<-alpha/gama3(n)
n1<-1
}
# while  Bonferroni test significance is not TRUE and the groups are not central
n1.1<-min(n1,n2,n3)
while(minsize==FALSE &&pvalor.Bonf<alpha.Bonf){
# repeat procedure for two groups in uhclust
while(minsize==FALSE && pvalor.Bonf<alpha.Bonf){
n2m<-min(n1,n2,n3)
n2_min<-n2m+1
n2_max<-(n-n1.1-n2_min)
oBn<-repeteBnmaxrestrito(md,n2_max,n2_min,n1,rep=rep)
maxBn<-oBn[[4]] # compare with Bn for size one group
maxBnmax<-max(maxBn1,maxBn)
# atualizing n2 value
if (maxBnmax==maxBn1){ #
n1<-1 # if group one's Bn is bigger
pvalor.Bonf<-pnorm(maxBnmax/varbn1,lower.tail = TRUE)
if(pvalor.Bonf>=alpha/gama3(n)){ # If Bonferroni's test is not significant, keep the interactions
n2=n2_min
}
}else{ # If the larger  Bn was the restrict
# Define n2 based on max Bn
n1.temp<-length(oBn$grupo1);n2.temp<-length(oBn$grupo2);n3.temp<-length(oBn$grupo3)
#
if(n1.temp==n1.1){
n2<-n2.temp
}else{
if(n2.temp==n1.1){
n2<-n1.temp
}
}
n3<-n-(n1.1+n2)
pvalor.Bonf<-pnorm(maxBnmax/funcaovar(c(rep(1,n1),rep(2,n2),rep(3,n3)[[1]]),BootB,BootB1)$varbn,lower.tail = TRUE)
}
# update the 3 groups
n3<-n-(n1.1+n2)
# With new group sizes, we need to update the central configuration
minsize<-((n1.1==floor(n/3)&&n2==floor(n/3))||(n1.1==floor(n/3)&&n3==floor(n/3))||(n2==floor(n/3)&&n3==floor(n/3)))# os tamanhos com menor variancia para os quais nao queremos fazer otimizacao restrita
if (pvalor.Bonf<alpha.Bonf){
clust1<-oBn[[2]];clust2<-oBn[[3]];clust3<-oBn[[4]]}
if (minsize==TRUE && pvalor.Bonf<alpha.Bonf){
clust1<-oBn1[[2]];clust2<-oBn1[[3]];clust3<-oBn1[[4]]
posicaoBn1max[clust1]<-1;posicaoBn1max[clust2]<-2;posicaoBn1max[clust3]<-3
varbn1<-funcaovar(posicaoBn1max,BootB,BootB1)$varbn
pvalor.Bonf.<-pnorm(maxBn1/sqrt(varbn1),lower.tail = FALSE)
n1=1
}
}
n1.1<-n1.1+1
}
}
p.valor<-pvalor.Bonf
alpha_correct<-alpha.Bonf
}else{ # If classic test returned homogeneous
clust1<-1:n;clust2<-0;clust3<-0
p.valor<-is.h$p.value
n1<-n
alpha_correct<-alpha
}
# answer
if(n1!=n){ # If we have groups, then non-homogeneous elements
if(pvalor.Bonf>alpha.Bonf){ # for the rare case of not being homogeneous but not finding significant groups
n1<-length(is.h$grupo1)
n2<-length(is.h$grupo2)
n3<-length(is.h$grupo3)
ishomo=FALSE
p<-is.h$p.value
alpha_correct<-alpha
posicaoBn<-vector()
posicaoBn[is.h$grupo1]<-1;posicaoBn[is.h$grupo2]<-2;posicaoBn[is.h$grupo3]<-3
Bn<-bn3(posicaoBn,md)
varbn<-funcaovar(posicaoBn,BootB,BootB1)$varbn
clust1<-is.h$grupo1;clust2<-is.h$grupo2;clust3<-is.h$grupo3
if(maxBn1>Bn){
Bn=maxBn1
clust1<-oBn1[[2]];clust2<-oBn1[[3]];clust3<-oBn1[[4]]
posicaoBn1max.temp<-vector()
posicaoBn1max.temp[clust1]<-1;posicaoBn1max.temp[clust2]<-2;posicaoBn1max.temp[clust3]<-3
varbn<-funcaovar(posicaoBn1max.temp,BootB,BootB1)$varbn
#fazer o teste
p<-pnorm(Bn/sqrt(varbn),lower.tail = FALSE)
if(p>alpha.Bonf){
ishomo=TRUE
}
}
}else{
ishomo=FALSE
#Calculate Bn with Group Configuration
posicaoBn<-vector()
posicaoBn[clust1]<-1;posicaoBn[clust2]<-2;posicaoBn[clust3]<-3
Bn<-bn3(posicaoBn,md)
varbn<-funcaovar(posicaoBn,BootB,BootB1)$varbn
}
}else{ # If we only have one group, then homogeneous elements
ishomo=TRUE
posicaoBn<-vector()
clust1<-is.h[[2]];clust2<-is.h[[3]];clust3<-is.h[[4]]
posicaoBn[clust1]<-1;posicaoBn[clust2]<-2;posicaoBn[clust3]<-3
Bn<--bn3(posicaoBn,md)
varbn<-funcaovar(posicaoBn,BootB,BootB1)$varbn
}
ans=list(list(cluster1=clust1,cluster2=clust2,cluster3=clust3),p.valor,alpha_correct,ishomo,Bn,varbn)#, ResultadoTesteIsHomo)
names(ans)=c("groups","p.value","alpha_corrected","ishomo","Bn","varBn")#, "ResultadoTesteIsHomo")
return(ans)
}
## Examples
#set.seed(123)
#x = matrix(rnorm(15000),nrow=15)  #creating homogeneous Gaussian dataset
#res = uclust3(data=x)
#res
#x[1:6,] = x[1:6,]+0.5 #Heterogeneous dataset (first 5 samples have different mean)
#x[7:12,] = x[7:12,]+1
#res = uclust3(data=x)
#res$groups
md=as.matrix(dist(as.matrix(Data))^2)
uc3=uclust3(md=md)
groups.uclust3
uc3$groups
groups.uclust3<-vector()
groups.uclust3[uc3$groups$cluster1]<-1
groups.uclust3[uc3$groups$cluster2]<-2
groups.uclust3[uc3$groups$cluster3]<-3
ARI_u3_pics=adjustedRandIndex(groups.uclust3,true.v)
res=c(ARI_uhc_pics,ARI_sig_pics,ARI_u3_pics)
names(res)=c("uhclust","sigclust","uclust3")
res
load(file="Data_3")
v=uhclust(data=Data,alpha=0.05)
# ARI
true.v=c(rep(1,10),rep(2,10),rep(3,10))
ARI_uhc_pics=adjustedRandIndex(v$groups,true.v) #
#library(uclust)
#library("mclust")
load(file="Data_3")
#library(uclust)
#library("mclust")
load(file="Data_3")
v=uhclust(data=Data,alpha=0.05)
# ARI
true.v=c(rep(1,10),rep(2,10),rep(3,10))
ARI_uhc_pics=adjustedRandIndex(v$groups,true.v) #
sig=shc(as.matrix(Data),metric = "euclidean", linkage = "average", alpha=0.05)
plot(sig)
Data_extra=Data
rownames(Data_extra)=as.character(c(1:30))
sig1=shc(as.matrix(Data_extra),metric = "euclidean", linkage = "average", alpha=0.05)
plot(sig1)
# ARI
hc=hclust(dist(as.matrix(Data_extra)), method="average")
#plot(hc)
hch=(sig1$nd_type=="sig")*1
k.cut=sum(hch)+1
as.d=as.dendrogram(hc)
ct=cutree(as.d,k=k.cut)
ARI_sig_pics=adjustedRandIndex(ct,true.v)
md=as.matrix(dist(as.matrix(Data))^2)
uc3=uclust3(md=md)
groups.uclust3<-vector()
groups.uclust3[uc3$groups$cluster1]<-1
groups.uclust3[uc3$groups$cluster2]<-2
groups.uclust3[uc3$groups$cluster3]<-3
ARI_u3_pics=adjustedRandIndex(groups.uclust3,true.v)
res=c(ARI_uhc_pics,ARI_sig_pics,ARI_u3_pics)
names(res)=c("uhclust","sigclust","uclust3")
res
library(GEOquery)
#BiocManager::install("GEOquery",force = TRUE)
#library(GEOquery)
#library(uclust)
fulldata=getGEO("GDS1615", GSEMatrix = FALSE)
data.t=dataTable(fulldata)
data_pbmc.df=data.t@table[,3:129]
data_pbmc=t(as.matrix(data_pbmc.df))
data_pbmc_id=c(1:length(xx@columns[,2]))
data_pbmc_id=c(1:length(data.t@columns[,2]))
g1="normal"
g2="ulcerative colitis"
g3="Crohn's disease"
data_pbmc_id[which(xx@columns[,2]==g1)]=1
data_pbmc_id[which(xx@columns[,2]==g2)]=2
data_pbmc_id[which(xx@columns[,2]==g3)]=3
data_pbmc_id[which(data.t@columns[,2]==g1)]=1
data_pbmc_id[which(data.t@columns[,2]==g2)]=2
data_pbmc_id[which(data.t@columns[,2]==g3)]=3
d=dist(data_pbmc)
setwd("C:/Users/Cleber.PROFCLEBER/Dropbox/Orientações/Debora/Aplications to real dataset/aplicação PBMC")
save(d,file="dist_data_pbmc")
?bn3
#save(d,file="dist_data_pbmc")
Bn=bn3(group_id=data_pbmc_id,md=as.matrix(d))
Bn
utest_3=utest3(group_id=data_pbmc_id,md=as.matrix(d))
# Description
# Test for the separation of three groups. The null hypothesis states that the groups are homogeneous and the alternative hypothesis states that at least one is separated from the others.
# Usage
# utest(group_id, md = NULL, data = NULL, alpha = 0.05, numB = 1000)
# Arguments
# group_id	- A vector of 1s, 2s and 3s indicating to which group the samples belong. Must be in the same order as data or md.
# md	- Matrix of distances between all data points.
# data - 	Data matrix. Each row represents an observation.
# alpha - significance level
# numB - Number of resampling iterations.
utest3<-function(group_id,md=NULL,data=NULL,alpha=0.05,numB=1000){
if (is.null(md)) {
if (is.null(data)) {
stop("No data provided")
}
md <- as.matrix(dist(data)^2)
}
if (class(md) != "matrix") {
stop("md is not of class matrix")
}
grupo<-list()
grupo[[1]]<-which(group_id==1) ;grupo[[2]]<-which(group_id==2) ; grupo[[3]]<-which(group_id==3)
ng<-NULL
ng[1]<-length(grupo[[1]]);ng[2]<-length(grupo[[2]]);ng[3]<-length(grupo[[3]])
n<-sum(ng)
dim_d <- dim(md)[1]
if(dim_d != n){
stop("Incorrect dimension or group_id")
}
Bn<-bn3(group_id,md)
Bnboot<-vector()
for(b in 1:numB){
group_idboot<-sample(group_id)
Bnboot[b]<-bn3(group_idboot,md)
}
sdBn<-sd(Bnboot)
pvalor<-2*pnorm(abs(Bn/sdBn),lower.tail=FALSE)
if(pvalor<alpha){
ans<-list(FALSE,pvalor,Bn,sdBn)
names(ans)<-c("is.homo","pvalue","Bn","sdBn")
}else{
ans<-list(TRUE,pvalor,Bn,sdBn)
names(ans)<-c("is.homo","pvalue","Bn","sdBn")
}
# message(paste("\t U-test for group separation  \n\nTest Statistic Bn =",
# round(ans$Bn, digits = 4), "\t p-value = ", round(ans$Pvalue,
# digits = 4), "\nAlternative hypothesis: The groups are not homogeneous,
# \nthere exists some separation between groups. "))
return(ans)
}
# Details
# Either `data` or `md` should be provided. If data are entered directly, Bn will be computed considering the squared Euclidean distance, which is compatible with is_homo, uclust and uhclust.
##
# Examples
# Simulate a dataset with two separate groups, the first row has mean -4, the next 5 rows have mean 0 and
# the last 5 rows have mean 4.
# data <- matrix(c(rnorm(15, -4),rnorm(75, 0), rnorm(75, 4)), nrow = 11, byrow=TRUE)
# U test for mixed up groups
# utest3(group_id=c(1,2,3,1,2,3,1,2,3,1,2), data=data, numB=3000)
# U test for correct group definitions
# utest3(group_id=c(1,2,2,2,2,2,3,3,3,3,3), data=data, numB=3000)
utest_3=utest3(group_id=data_pbmc_id,md=as.matrix(d))
utest_3
setwd("C:/Users/Cleber.PROFCLEBER/Dropbox/Orientações/Debora/JMVA - Versão 2/Simulations")
sample(10,1)
sample(11,1)
sample(11,1)
sample(11,1)
sample(11,1)
sample(11,1)
sample(11,1)
sample(11,1)
x=c(9,2,8,10)
sample([1:11][-x],1)
sample(1:11[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
x=c(9,2,8,10,4)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
sample(c(1:11)[-x],1)
x=c(9,2,8,10,4,1,5)
sample(c(1:11)[-x],1)
x=c(9,2,8,10,4,1,5,6)
sample(c(1:11)[-x],1)
